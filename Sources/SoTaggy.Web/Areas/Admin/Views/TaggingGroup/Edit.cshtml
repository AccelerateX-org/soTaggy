@model SoTaggy.Web.Data.TaggingGroup

@{
    ViewBag.Title = "Edit";
}

<h2>Tagging-Gruppe ändern</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>TaggingGroup</legend>
        @Html.HiddenFor(model => model.TaggingGroupId)
        <div class="form-group">
            @Html.LabelFor(model => model.Name, new { @class = "col-lg-2 control-label" })
            <div class="col-lg-10">
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Name)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitStart, new { @class = "col-lg-2 control-label" })
        <div class="col-lg-10">
            @Html.TextBoxFor(model => model.UnitStart, "{0:dd.MM.yyyy}", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.UnitStart)
        </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitEnd, new { @class = "col-lg-2 control-label" })
        <div class="col-lg-10">
            @Html.TextBoxFor(model => model.UnitEnd, "{0:dd.MM.yyyy}", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.UnitEnd)
        </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ArtworkPoolId, "ArtworkPool", new { @class = "col-lg-2 control-label" })
        <div class="col-lg-10">
            @Html.DropDownListFor(model => model.ArtworkPoolId, null, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ArtworkPoolId)
        </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UserName, new { @class = "col-lg-2 control-label" })
        <div class="col-lg-10">
            @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", disabled="" })
            @Html.ValidationMessageFor(model => model.UserName)
        </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Password, new { @class = "col-lg-2 control-label" })
        <div class="col-lg-10">
            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", disabled = "" })
            @Html.ValidationMessageFor(model => model.Password)
        </div>
        </div>

        <div class="form-group">
            <div class="col-lg-offset-2 col-lg-10">
                <input type="submit" class="btn btn-success" value="Änderungen speichern" />
                <a href="@Url.Action("Index")" class="btn">Zurück zur Liste</a>
            </div>
        </div>
    </fieldset>
}

@section Styles {
    @Styles.Render("~/Content/themes/base/css")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")

    <script>
    (function ($, Globalize) {

        // Clone original methods we want to call into
        var originalMethods = {
            min: $.validator.methods.min,
            max: $.validator.methods.max,
            range: $.validator.methods.range
        };

        // Tell the validator that we want numbers parsed using Globalize

        $.validator.methods.number = function (value, element) {
            var val = Globalize.parseFloat(value);
            return this.optional(element) || ($.isNumeric(val));
        };

        // Tell the validator that we want dates parsed using Globalize

        $.validator.methods.date = function (value, element) {
            var val = Globalize.parseDate(value);
            return this.optional(element) || (val);
        };

        // Tell the validator that we want numbers parsed using Globalize,
        // then call into original implementation with parsed value

        $.validator.methods.min = function (value, element, param) {
            var val = Globalize.parseFloat(value);
            return originalMethods.min.call(this, val, element, param);
        };

        $.validator.methods.max = function (value, element, param) {
            var val = Globalize.parseFloat(value);
            return originalMethods.max.call(this, val, element, param);
        };

        $.validator.methods.range = function (value, element, param) {
            var val = Globalize.parseFloat(value);
            return originalMethods.range.call(this, val, element, param);
        };

    }(jQuery, Globalize));


    $(function() {
        Globalize.culture('de-DE');
        $("#UnitStart").datepicker(
            {
                dateFormat: 'dd.mm.yy',
                option: 'de-DE'
            }
        );

        $("#UnitEnd").datepicker(
            {
                dateFormat: 'dd.mm.yy',
                option: 'de-DE'
            }
        );

        });

    </script>
}
